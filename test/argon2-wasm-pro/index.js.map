{"version":3,"sources":["argon2.js","dist/argon2.js","dist/sources.js","dist/base64.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA,AENA;AHUA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.argon2 = factory();\n    }\n})(typeof self !== 'undefined' ? self : this, function () {\n    const global = typeof self !== 'undefined' ? self : this;\n\n    /**\n     * @enum\n     */\n    const ArgonType = {\n        argon2d: 0,\n        argon2i: 1,\n        argon2id: 2\n    };\n\n    // 加载Module\n    function loadModule(mem) {\n        if (loadModule._promise) {\n            return loadModule._promise;\n        }\n        if (loadModule._module) {\n            return Promise.resolve(loadModule._module);\n        }\n        let promise = loadWasmModule().then(\n            Module =>\n                new Promise(resolve => {\n                    Module.postRun.push(() => resolve(Module));\n                })\n        );\n        loadModule._promise = promise;\n        return promise.then(Module => {\n            loadModule._module = Module;\n            delete loadModule._promise;\n            return Module;\n        });\n    }\n\n    function loadWasmModule() {\n        if (global.loadArgon2WasmModule) {\n            return global.loadArgon2WasmModule();\n        }\n        return Promise.resolve(require('./dist/argon2.js'));\n    }\n\n    //分配数组\n    function allocateArray(Module, strOrArr) {\n        const arr =\n            strOrArr instanceof Uint8Array || strOrArr instanceof Array\n                ? strOrArr\n                : encodeUtf8(strOrArr);\n        const nullTerminatedArray = new Uint8Array([...arr, 0]);\n        return Module.allocate(nullTerminatedArray, 'i8', Module.ALLOC_NORMAL);\n    }\n\n    function encodeUtf8(str) {\n        if (typeof TextEncoder === 'function') {\n            return new TextEncoder().encode(str);\n        } else if (typeof Buffer === 'function') {\n            return Buffer.from(str);\n        } else {\n            throw new Error(\"Don't know how to decode UTF8\");\n        }\n    }\n\n    /**\n     * Argon2 hash\n     * @param {string|Uint8Array} params.pass - password string\n     * @param {string|Uint8Array} params.salt - salt string\n     * @param {number} [params.time=1] - the number of iterations\n     * @param {number} [params.mem=1024] - used memory, in KiB\n     * @param {number} [params.hashLen=24] - desired hash length\n     * @param {number} [params.parallelism=1] - desired parallelism\n     * @param {number} [params.type=argon2.argon2d] - hash type:\n     *      argon2.argon2d\n     *      argon2.argon2i\n     *      argon2.argon2id\n     *\n     * @return Promise\n     *\n     * @example\n     *  argon2.hash({ pass: 'password', salt: 'somesalt' })\n     *      .then(h => console.log(h.hash, h.hashHex, h.encoded))\n     *      .catch(e => console.error(e.message, e.code))\n     */\n    function argon2Hash(params) {\n        const mCost = params.mem || 1024;\n        return loadModule(mCost).then(Module => {\n            const tCost = params.time || 1;\n            const parallelism = params.parallelism || 1;\n            const pwd = allocateArray(Module, params.pass);\n            const pwdlen = params.pass.length;\n            const salt = allocateArray(Module, params.salt);\n            const saltlen = params.salt.length;\n            const hash = Module.allocate(\n                new Array(params.hashLen || 24),\n                'i8',\n                Module.ALLOC_NORMAL\n            );\n            const hashlen = params.hashLen || 24;\n            const encoded = Module.allocate(\n                new Array(512),\n                'i8',\n                Module.ALLOC_NORMAL\n            );\n            const encodedlen = 512;\n            const argon2Type = params.type || ArgonType.argon2d;\n            const version = 0x13;\n            let err;\n            let res;\n            try {\n                res = Module._argon2_hash(\n                    tCost,\n                    mCost,\n                    parallelism,\n                    pwd,\n                    pwdlen,\n                    salt,\n                    saltlen,\n                    hash,\n                    hashlen,\n                    encoded,\n                    encodedlen,\n                    argon2Type,\n                    version\n                );\n            } catch (e) {\n                err = e;\n            }\n            let result;\n            if (res === 0 && !err) {\n                let hashStr = '';\n                const hashArr = new Uint8Array(hashlen);\n                for (let i = 0; i < hashlen; i++) {\n                    const byte = Module.HEAP8[hash + i];\n                    hashArr[i] = byte;\n                    hashStr += ('0' + (0xff & byte).toString(16)).slice(-2);\n                }\n                const encodedStr = Module.UTF8ToString(encoded);\n                result = {\n                    hash: hashArr,\n                    hashHex: hashStr,\n                    encoded: encodedStr\n                };\n            } else {\n                try {\n                    if (!err) {\n                        err = Module.UTF8ToString(\n                            Module._argon2_error_message(res)\n                        );\n                    }\n                } catch (e) { }\n                result = { message: err, code: res };\n            }\n            try {\n                Module._free(pwd);\n                Module._free(salt);\n                Module._free(hash);\n                Module._free(encoded);\n            } catch (e) { }\n            if (err) {\n                throw result;\n            } else {\n                return result;\n            }\n        });\n    }\n\n    /**\n     * Argon2 verify function\n     * @param {string} params.pass - password string\n     * @param {string|Uint8Array} params.encoded - encoded hash\n     * @param {number} [params.type=argon2.argon2d] - hash type:\n     *      argon2.argon2d\n     *      argon2.argon2i\n     *      argon2.argon2id\n     *\n     * @returns Promise\n     *\n     * @example\n     *  argon2.verify({ pass: 'password', encoded: 'encoded-hash' })\n     *      .then(() => console.log('OK'))\n     *      .catch(e => console.error(e.message, e.code))\n     */\n    function argon2Verify(params) {\n        return loadModule().then(Module => {\n            const pwd = allocateArray(Module, params.pass);\n            const pwdlen = params.pass.length;\n            const enc = allocateArray(Module, params.encoded);\n            let argon2Type = params.type;\n            if (argon2Type === undefined) {\n                let typeStr = params.encoded.split('$')[1];\n                if (typeStr) {\n                    typeStr = typeStr.replace('a', 'A');\n                    argon2Type = ArgonType[typeStr] || ArgonType.argon2d;\n                }\n            }\n            let err;\n            let res;\n            try {\n                res = Module._argon2_verify(enc, pwd, pwdlen, argon2Type);\n            } catch (e) {\n                err = e;\n            }\n            let result;\n            if (res || err) {\n                try {\n                    if (!err) {\n                        err = Module.UTF8ToString(\n                            Module._argon2_error_message(res)\n                        );\n                    }\n                } catch (e) { }\n                result = { message: err, code: res };\n            }\n            try {\n                Module._free(pwd);\n                Module._free(enc);\n            } catch (e) { }\n            if (err) {\n                throw result;\n            } else {\n                return result;\n            }\n        });\n    }\n\n    return {\n        ...ArgonType,\n        hash: argon2Hash,\n        verify: argon2Verify\n    };\n});\n","var Module = typeof self !== \"undefined\" && typeof self.Module !== \"undefined\" ? self.Module : {};\r\nvar moduleOverrides = {};\r\nvar key;\r\nfor (key in Module) {\r\n    if (Module.hasOwnProperty(key)) {\r\n        moduleOverrides[key] = Module[key]\r\n    }\r\n}\r\nModule[\"arguments\"] = [];\r\nModule[\"thisProgram\"] = \"./this.program\";\r\nModule[\"quit\"] = function (status, toThrow) {\r\n    throw toThrow\r\n};\r\nModule[\"preRun\"] = [];\r\nModule[\"postRun\"] = [];\r\nvar ENVIRONMENT_IS_WEB = false;\r\nvar ENVIRONMENT_IS_WORKER = false;\r\nvar ENVIRONMENT_IS_NODE = false;\r\nvar ENVIRONMENT_HAS_NODE = false;\r\nvar ENVIRONMENT_IS_SHELL = false;\r\nENVIRONMENT_IS_WEB = typeof window === \"object\";\r\nENVIRONMENT_IS_WORKER = typeof importScripts === \"function\";\r\nENVIRONMENT_HAS_NODE = typeof process === \"object\" && typeof process.versions === \"object\" && typeof process.versions.node === \"string\";\r\nENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;\r\nENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\r\nvar scriptDirectory = \"\";\r\n\r\n\r\nif (ENVIRONMENT_IS_NODE) {\r\n    scriptDirectory = __dirname + \"/\";\r\n\r\n    if (process[\"argv\"].length > 1) {\r\n        Module[\"thisProgram\"] = process[\"argv\"][1].replace(/\\\\/g, \"/\")\r\n    }\r\n    Module[\"arguments\"] = process[\"argv\"].slice(2);\r\n    if (typeof module !== \"undefined\") {\r\n        module[\"exports\"] = Module\r\n    }\r\n    process[\"on\"](\"uncaughtException\", function (ex) {\r\n        if (!(ex instanceof ExitStatus)) {\r\n            throw ex\r\n        }\r\n    });\r\n    process[\"on\"](\"unhandledRejection\", abort);\r\n    Module[\"quit\"] = function (status) {\r\n        process[\"exit\"](status)\r\n    };\r\n    Module[\"inspect\"] = function () {\r\n        return \"[Emscripten Module object]\"\r\n    }\r\n} else if (ENVIRONMENT_IS_SHELL) {\r\n    if (typeof scriptArgs != \"undefined\") {\r\n        Module[\"arguments\"] = scriptArgs\r\n    } else if (typeof arguments != \"undefined\") {\r\n        Module[\"arguments\"] = arguments\r\n    }\r\n    if (typeof quit === \"function\") {\r\n        Module[\"quit\"] = function (status) {\r\n            quit(status)\r\n        }\r\n    }\r\n} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\r\n    if (ENVIRONMENT_IS_WORKER) {\r\n        scriptDirectory = self.location.href\r\n    } else if (document.currentScript) {\r\n        scriptDirectory = document.currentScript.src\r\n    }\r\n    if (scriptDirectory.indexOf(\"blob:\") !== 0) {\r\n        scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf(\"/\") + 1)\r\n    } else {\r\n        scriptDirectory = \"\"\r\n    }\r\n} else {\r\n}\r\nvar out = Module[\"print\"] || (typeof console !== \"undefined\" ? console.log.bind(console) : typeof print !== \"undefined\" ? print : null);\r\nvar err = Module[\"printErr\"] || (typeof printErr !== \"undefined\" ? printErr : typeof console !== \"undefined\" && console.warn.bind(console) || out);\r\nfor (key in moduleOverrides) {\r\n    if (moduleOverrides.hasOwnProperty(key)) {\r\n        Module[key] = moduleOverrides[key]\r\n    }\r\n}\r\nmoduleOverrides = undefined;\r\n\r\nfunction dynamicAlloc(size) {\r\n    var ret = HEAP32[DYNAMICTOP_PTR >> 2];\r\n    var end = ret + size + 15 & -16;\r\n    if (end > _emscripten_get_heap_size()) {\r\n        abort()\r\n    }\r\n    HEAP32[DYNAMICTOP_PTR >> 2] = end;\r\n    return ret\r\n}\r\n\r\nfunction getNativeTypeSize(type) {\r\n    switch (type) {\r\n        case \"i1\":\r\n        case \"i8\":\r\n            return 1;\r\n        case \"i16\":\r\n            return 2;\r\n        case \"i32\":\r\n            return 4;\r\n        case \"i64\":\r\n            return 8;\r\n        case \"float\":\r\n            return 4;\r\n        case \"double\":\r\n            return 8;\r\n        default: {\r\n            if (type[type.length - 1] === \"*\") {\r\n                return 4\r\n            } else if (type[0] === \"i\") {\r\n                var bits = parseInt(type.substr(1));\r\n                assert(bits % 8 === 0, \"getNativeTypeSize invalid bits \" + bits + \", type \" + type);\r\n                return bits / 8\r\n            } else {\r\n                return 0\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvar asm2wasmImports = {\r\n    \"f64-rem\": function (x, y) {\r\n        return x % y\r\n    }, \"debugger\": function () {\r\n        debugger\r\n    }\r\n};\r\n\r\nif (typeof WebAssembly !== \"object\") {\r\n    err(\"no native wasm support detected\")\r\n}\r\n\r\nfunction setValue(ptr, value, type, noSafe) {\r\n    type = type || \"i8\";\r\n    if (type.charAt(type.length - 1) === \"*\") type = \"i32\";\r\n    switch (type) {\r\n        case \"i1\":\r\n            HEAP8[ptr >> 0] = value;\r\n            break;\r\n        case \"i8\":\r\n            HEAP8[ptr >> 0] = value;\r\n            break;\r\n        case \"i16\":\r\n            HEAP16[ptr >> 1] = value;\r\n            break;\r\n        case \"i32\":\r\n            HEAP32[ptr >> 2] = value;\r\n            break;\r\n        case \"i64\":\r\n            tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];\r\n            break;\r\n        case \"float\":\r\n            HEAPF32[ptr >> 2] = value;\r\n            break;\r\n        case \"double\":\r\n            HEAPF64[ptr >> 3] = value;\r\n            break;\r\n        default:\r\n            abort(\"invalid type for setValue: \" + type)\r\n    }\r\n}\r\n\r\nvar wasmMemory;\r\nvar ABORT = false;\r\n\r\nfunction assert(condition, text) {\r\n    if (!condition) {\r\n        abort(\"Assertion failed: \" + text)\r\n    }\r\n}\r\n\r\nvar ALLOC_NORMAL = 0;\r\nvar ALLOC_NONE = 3;\r\n\r\nfunction allocate(slab, types, allocator, ptr) {\r\n    var zeroinit, size;\r\n    if (typeof slab === \"number\") {\r\n        zeroinit = true;\r\n        size = slab\r\n    } else {\r\n        zeroinit = false;\r\n        size = slab.length\r\n    }\r\n    var singleType = typeof types === \"string\" ? types : null;\r\n    var ret;\r\n    if (allocator == ALLOC_NONE) {\r\n        ret = ptr\r\n    } else {\r\n        ret = [_malloc, stackAlloc, dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length))\r\n    }\r\n    if (zeroinit) {\r\n        var stop;\r\n        ptr = ret;\r\n        assert((ret & 3) == 0);\r\n        stop = ret + (size & ~3);\r\n        for (; ptr < stop; ptr += 4) {\r\n            HEAP32[ptr >> 2] = 0\r\n        }\r\n        stop = ret + size;\r\n        while (ptr < stop) {\r\n            HEAP8[ptr++ >> 0] = 0\r\n        }\r\n        return ret\r\n    }\r\n    if (singleType === \"i8\") {\r\n        if (slab.subarray || slab.slice) {\r\n            HEAPU8.set(slab, ret)\r\n        } else {\r\n            HEAPU8.set(new Uint8Array(slab), ret)\r\n        }\r\n        return ret\r\n    }\r\n    var i = 0, type, typeSize, previousType;\r\n    while (i < size) {\r\n        var curr = slab[i];\r\n        type = singleType || types[i];\r\n        if (type === 0) {\r\n            i++;\r\n            continue\r\n        }\r\n        if (type == \"i64\") type = \"i32\";\r\n        setValue(ret + i, curr, type);\r\n        if (previousType !== type) {\r\n            typeSize = getNativeTypeSize(type);\r\n            previousType = type\r\n        }\r\n        i += typeSize\r\n    }\r\n    return ret\r\n}\r\n\r\nvar UTF8Decoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf8\") : undefined;\r\n\r\nfunction UTF8ArrayToString(u8Array, idx, maxBytesToRead) {\r\n    var endIdx = idx + maxBytesToRead;\r\n    var endPtr = idx;\r\n    while (u8Array[endPtr] && !(endPtr >= endIdx))++endPtr;\r\n    if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {\r\n        return UTF8Decoder.decode(u8Array.subarray(idx, endPtr))\r\n    } else {\r\n        var str = \"\";\r\n        while (idx < endPtr) {\r\n            var u0 = u8Array[idx++];\r\n            if (!(u0 & 128)) {\r\n                str += String.fromCharCode(u0);\r\n                continue\r\n            }\r\n            var u1 = u8Array[idx++] & 63;\r\n            if ((u0 & 224) == 192) {\r\n                str += String.fromCharCode((u0 & 31) << 6 | u1);\r\n                continue\r\n            }\r\n            var u2 = u8Array[idx++] & 63;\r\n            if ((u0 & 240) == 224) {\r\n                u0 = (u0 & 15) << 12 | u1 << 6 | u2\r\n            } else {\r\n                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u8Array[idx++] & 63\r\n            }\r\n            if (u0 < 65536) {\r\n                str += String.fromCharCode(u0)\r\n            } else {\r\n                var ch = u0 - 65536;\r\n                str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023)\r\n            }\r\n        }\r\n    }\r\n    return str\r\n}\r\n\r\nfunction UTF8ToString(ptr, maxBytesToRead) {\r\n    return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : \"\"\r\n}\r\n\r\n\r\nvar WASM_PAGE_SIZE = 65536;\r\n\r\nfunction alignUp(x, multiple) {\r\n    if (x % multiple > 0) {\r\n        x += multiple - x % multiple\r\n    }\r\n    return x\r\n}\r\n\r\nvar buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\r\n\r\nfunction updateGlobalBufferViews() {\r\n    Module[\"HEAP8\"] = HEAP8 = new Int8Array(buffer);\r\n    Module[\"HEAP16\"] = HEAP16 = new Int16Array(buffer);\r\n    Module[\"HEAP32\"] = HEAP32 = new Int32Array(buffer);\r\n    Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(buffer);\r\n    Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(buffer);\r\n    Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(buffer);\r\n    Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(buffer);\r\n    Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(buffer)\r\n}\r\n\r\nvar DYNAMIC_BASE = 5248528, DYNAMICTOP_PTR = 5616;\r\nvar TOTAL_STACK = 5242880;\r\nvar INITIAL_TOTAL_MEMORY = Module[\"TOTAL_MEMORY\"] || 16777216;\r\nif (INITIAL_TOTAL_MEMORY < TOTAL_STACK) err(\"TOTAL_MEMORY should be larger than TOTAL_STACK, was \" + INITIAL_TOTAL_MEMORY + \"! (TOTAL_STACK=\" + TOTAL_STACK + \")\");\r\nif (Module[\"wasmMemory\"]) {\r\n    wasmMemory = Module[\"wasmMemory\"]\r\n} else {\r\n    wasmMemory = new WebAssembly.Memory({\r\n        \"initial\": INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE,\r\n        \"maximum\": 2147418112 / WASM_PAGE_SIZE\r\n    })\r\n}\r\nif (wasmMemory) {\r\n    buffer = wasmMemory.buffer\r\n}\r\nINITIAL_TOTAL_MEMORY = buffer.byteLength;\r\nupdateGlobalBufferViews();\r\nHEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;\r\n\r\nfunction callRuntimeCallbacks(callbacks) {\r\n    while (callbacks.length > 0) {\r\n        var callback = callbacks.shift();\r\n        if (typeof callback == \"function\") {\r\n            callback();\r\n            continue\r\n        }\r\n        var func = callback.func;\r\n        if (typeof func === \"number\") {\r\n            if (callback.arg === undefined) {\r\n                Module[\"dynCall_v\"](func)\r\n            } else {\r\n                Module[\"dynCall_vi\"](func, callback.arg)\r\n            }\r\n        } else {\r\n            func(callback.arg === undefined ? null : callback.arg)\r\n        }\r\n    }\r\n}\r\n\r\nvar __ATPRERUN__ = [];\r\nvar __ATINIT__ = [];\r\nvar __ATMAIN__ = [];\r\nvar __ATPOSTRUN__ = [];\r\n\r\nfunction preRun() {\r\n    if (Module[\"preRun\"]) {\r\n        if (typeof Module[\"preRun\"] == \"function\") Module[\"preRun\"] = [Module[\"preRun\"]];\r\n        while (Module[\"preRun\"].length) {\r\n            addOnPreRun(Module[\"preRun\"].shift())\r\n        }\r\n    }\r\n    callRuntimeCallbacks(__ATPRERUN__)\r\n}\r\n\r\nfunction initRuntime() {\r\n    callRuntimeCallbacks(__ATINIT__)\r\n}\r\n\r\nfunction preMain() {\r\n    callRuntimeCallbacks(__ATMAIN__)\r\n}\r\n\r\n\r\nfunction postRun() {\r\n    if (Module[\"postRun\"]) {\r\n        if (typeof Module[\"postRun\"] == \"function\") Module[\"postRun\"] = [Module[\"postRun\"]];\r\n        while (Module[\"postRun\"].length) {\r\n            addOnPostRun(Module[\"postRun\"].shift())\r\n        }\r\n    }\r\n    callRuntimeCallbacks(__ATPOSTRUN__)\r\n}\r\n\r\nfunction addOnPreRun(cb) {\r\n    __ATPRERUN__.unshift(cb)\r\n}\r\n\r\nfunction addOnPostRun(cb) {\r\n    __ATPOSTRUN__.unshift(cb)\r\n}\r\n\r\nvar Math_abs = Math.abs;\r\nvar Math_ceil = Math.ceil;\r\nvar Math_floor = Math.floor;\r\nvar Math_min = Math.min;\r\nvar runDependencies = 0;\r\nvar runDependencyWatcher = null;\r\nvar dependenciesFulfilled = null;\r\n\r\nfunction addRunDependency(id) {\r\n    runDependencies++;\r\n    if (Module[\"monitorRunDependencies\"]) {\r\n        Module[\"monitorRunDependencies\"](runDependencies)\r\n    }\r\n}\r\n\r\nfunction removeRunDependency(id) {\r\n    runDependencies--;\r\n    if (Module[\"monitorRunDependencies\"]) {\r\n        Module[\"monitorRunDependencies\"](runDependencies)\r\n    }\r\n    if (runDependencies == 0) {\r\n        if (runDependencyWatcher !== null) {\r\n            clearInterval(runDependencyWatcher);\r\n            runDependencyWatcher = null\r\n        }\r\n        if (dependenciesFulfilled) {\r\n            var callback = dependenciesFulfilled;\r\n            dependenciesFulfilled = null;\r\n            callback()\r\n        }\r\n    }\r\n}\r\n\r\nModule[\"preloadedImages\"] = {};\r\nModule[\"preloadedAudios\"] = {};\r\n\r\n\r\nvar loadModule = require('./sources.js');\r\n\r\n\r\nfunction getBinary() {\r\n    try {\r\n        if (Module[\"wasmBinary\"]) {\r\n            return new Uint8Array(Module[\"wasmBinary\"])\r\n        }\r\n        return loadModule\r\n    } catch (err) {\r\n        abort(err)\r\n    }\r\n}\r\n\r\nfunction getBinaryPromise() {\r\n    return new Promise(function (resolve, reject) {\r\n        resolve(getBinary())\r\n    })\r\n}\r\n\r\nfunction createWasm(env) {\r\n    var info = {\r\n        \"env\": env,\r\n        \"global\": { \"NaN\": NaN, Infinity: Infinity },\r\n        \"global.Math\": Math,\r\n        \"asm2wasm\": asm2wasmImports\r\n    };\r\n\r\n    function receiveInstance(instance, module) {\r\n        var exports = instance.exports;\r\n        Module[\"asm\"] = exports;\r\n        removeRunDependency(\"wasm-instantiate\")\r\n    }\r\n\r\n    addRunDependency(\"wasm-instantiate\");\r\n\r\n    function receiveInstantiatedSource(output) {\r\n        receiveInstance(output[\"instance\"])\r\n    }\r\n\r\n    function instantiateArrayBuffer(receiver) {\r\n        return getBinaryPromise().then(function (binary) {\r\n            return WebAssembly.instantiate(binary, info)\r\n        }).then(receiver, function (reason) {\r\n            err(\"failed to asynchronously prepare wasm: \" + reason);\r\n            abort(reason)\r\n        })\r\n    }\r\n\r\n    function instantiateAsync() {\r\n        return instantiateArrayBuffer(receiveInstantiatedSource)\r\n    }\r\n\r\n    if (Module[\"instantiateWasm\"]) {\r\n        try {\r\n            var exports = Module[\"instantiateWasm\"](info, receiveInstance);\r\n            return exports\r\n        } catch (e) {\r\n            err(\"Module.instantiateWasm callback failed with error: \" + e);\r\n            return false\r\n        }\r\n    }\r\n    instantiateAsync();\r\n    return {}\r\n}\r\n\r\nModule[\"asm\"] = function (global, env, providedBuffer) {\r\n    env[\"memory\"] = wasmMemory;\r\n    env[\"table\"] = new WebAssembly.Table({ \"initial\": 11, \"maximum\": 11, \"element\": \"anyfunc\" });\r\n    env[\"__memory_base\"] = 1024;\r\n    env[\"__table_base\"] = 0;\r\n    var exports = createWasm(env);\r\n    return exports\r\n};\r\nvar tempDouble;\r\nvar tempI64;\r\n\r\nfunction _emscripten_get_heap_size() {\r\n    return HEAP8.length\r\n}\r\n\r\nfunction _emscripten_memcpy_big(dest, src, num) {\r\n    HEAPU8.set(HEAPU8.subarray(src, src + num), dest)\r\n}\r\n\r\nfunction _pthread_create() {\r\n    return 11\r\n}\r\n\r\nfunction _exit(status) {\r\n    exit(status)\r\n}\r\n\r\nfunction _pthread_exit(status) {\r\n    _exit(status)\r\n}\r\n\r\nfunction _pthread_join() {\r\n}\r\n\r\nfunction ___setErrNo(value) {\r\n    if (Module[\"___errno_location\"]) HEAP32[Module[\"___errno_location\"]() >> 2] = value;\r\n    return value\r\n}\r\n\r\nfunction abortOnCannotGrowMemory(requestedSize) {\r\n    abort(\"OOM\")\r\n}\r\n\r\nfunction emscripten_realloc_buffer(size) {\r\n    var PAGE_MULTIPLE = 65536;\r\n    size = alignUp(size, PAGE_MULTIPLE);\r\n    var oldSize = buffer.byteLength;\r\n    try {\r\n        var result = wasmMemory.grow((size - oldSize) / 65536);\r\n        if (result !== (-1 | 0)) {\r\n            buffer = wasmMemory.buffer;\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    } catch (e) {\r\n        return false\r\n    }\r\n}\r\n\r\nfunction _emscripten_resize_heap(requestedSize) {\r\n    var oldSize = _emscripten_get_heap_size();\r\n    var PAGE_MULTIPLE = 65536;\r\n    var LIMIT = 2147483648 - PAGE_MULTIPLE;\r\n    if (requestedSize > LIMIT) {\r\n        return false\r\n    }\r\n    var MIN_TOTAL_MEMORY = 16777216;\r\n    var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY);\r\n    while (newSize < requestedSize) {\r\n        if (newSize <= 536870912) {\r\n            newSize = alignUp(2 * newSize, PAGE_MULTIPLE)\r\n        } else {\r\n            newSize = Math.min(alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE), LIMIT)\r\n        }\r\n    }\r\n    newSize = Math.min(newSize, 2147418112);\r\n    if (newSize == oldSize) {\r\n        return false\r\n    }\r\n    if (!emscripten_realloc_buffer(newSize)) {\r\n        return false\r\n    }\r\n    updateGlobalBufferViews();\r\n    return true\r\n}\r\n\r\nvar asmGlobalArg = {};\r\nvar asmLibraryArg = {\r\n    \"b\": abort,\r\n    \"c\": ___setErrNo,\r\n    \"j\": _emscripten_get_heap_size,\r\n    \"i\": _emscripten_memcpy_big,\r\n    \"h\": _emscripten_resize_heap,\r\n    \"g\": _pthread_create,\r\n    \"f\": _pthread_exit,\r\n    \"e\": _pthread_join,\r\n    \"d\": abortOnCannotGrowMemory,\r\n    \"a\": DYNAMICTOP_PTR\r\n};\r\nvar asm = Module[\"asm\"](asmGlobalArg, asmLibraryArg, buffer);\r\nModule[\"asm\"] = asm;\r\nModule[\"_argon2_error_message\"] = function () {\r\n    return Module[\"asm\"][\"k\"].apply(null, arguments)\r\n};\r\nModule[\"_argon2_hash\"] = function () {\r\n    return Module[\"asm\"][\"l\"].apply(null, arguments)\r\n};\r\nModule[\"_argon2_verify\"] = function () {\r\n    return Module[\"asm\"][\"m\"].apply(null, arguments)\r\n};\r\nModule[\"_free\"] = function () {\r\n    return Module[\"asm\"][\"n\"].apply(null, arguments)\r\n};\r\nvar _malloc = Module[\"_malloc\"] = function () {\r\n    return Module[\"asm\"][\"o\"].apply(null, arguments)\r\n};\r\nvar stackAlloc = Module[\"stackAlloc\"] = function () {\r\n    return Module[\"asm\"][\"p\"].apply(null, arguments)\r\n};\r\nModule[\"asm\"] = asm;\r\nModule[\"allocate\"] = allocate;\r\nModule[\"UTF8ToString\"] = UTF8ToString;\r\nModule[\"ALLOC_NORMAL\"] = ALLOC_NORMAL;\r\n\r\nfunction ExitStatus(status) {\r\n    this.name = \"ExitStatus\";\r\n    this.message = \"Program terminated with exit(\" + status + \")\";\r\n    this.status = status\r\n}\r\n\r\nExitStatus.prototype = new Error;\r\nExitStatus.prototype.constructor = ExitStatus;\r\ndependenciesFulfilled = function runCaller() {\r\n    if (!Module[\"calledRun\"]) run();\r\n    if (!Module[\"calledRun\"]) dependenciesFulfilled = runCaller\r\n};\r\n\r\nfunction run(args) {\r\n    args = args || Module[\"arguments\"];\r\n    if (runDependencies > 0) {\r\n        return\r\n    }\r\n    preRun();\r\n    if (runDependencies > 0) return;\r\n    if (Module[\"calledRun\"]) return;\r\n\r\n    function doRun() {\r\n        if (Module[\"calledRun\"]) return;\r\n        Module[\"calledRun\"] = true;\r\n        if (ABORT) return;\r\n        initRuntime();\r\n        preMain();\r\n        if (Module[\"onRuntimeInitialized\"]) Module[\"onRuntimeInitialized\"]();\r\n        postRun()\r\n    }\r\n\r\n    if (Module[\"setStatus\"]) {\r\n        Module[\"setStatus\"](\"Running...\");\r\n        setTimeout(function () {\r\n            setTimeout(function () {\r\n                Module[\"setStatus\"](\"\")\r\n            }, 1);\r\n            doRun()\r\n        }, 1)\r\n    } else {\r\n        doRun()\r\n    }\r\n}\r\n\r\nModule[\"run\"] = run;\r\n\r\nfunction exit(status, implicit) {\r\n    if (implicit && Module[\"noExitRuntime\"] && status === 0) {\r\n        return\r\n    }\r\n    if (Module[\"noExitRuntime\"]) {\r\n    } else {\r\n        ABORT = true;\r\n        if (Module[\"onExit\"]) Module[\"onExit\"](status)\r\n    }\r\n    Module[\"quit\"](status, new ExitStatus(status))\r\n}\r\n\r\nfunction abort(what) {\r\n    if (Module[\"onAbort\"]) {\r\n        Module[\"onAbort\"](what)\r\n    }\r\n    what += \"\";\r\n    out(what);\r\n    err(what);\r\n    ABORT = true;\r\n    throw \"abort(\" + what + \"). Build with -s ASSERTIONS=1 for more info.\"\r\n}\r\n\r\nModule[\"abort\"] = abort;\r\nif (Module[\"preInit\"]) {\r\n    if (typeof Module[\"preInit\"] == \"function\") Module[\"preInit\"] = [Module[\"preInit\"]];\r\n    while (Module[\"preInit\"].length > 0) {\r\n        Module[\"preInit\"].pop()()\r\n    }\r\n}\r\nModule[\"noExitRuntime\"] = true;\r\nrun();\r\nif (typeof module !== \"undefined\") module.exports = Module;","var base64js = require('./base64.js');\r\n\r\nlet wasmBinaryBase64 = \"\";\r\n\r\nmodule.exports = base64js.toByteArray(wasmBinaryBase64);","\r\n\r\n// copied from https://github.com/beatgammit/base64-js\r\n\r\nexports.byteLength = byteLength\r\nexports.toByteArray = toByteArray\r\nexports.fromByteArray = fromByteArray\r\n\r\nvar lookup = []\r\nvar revLookup = []\r\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\r\n\r\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\r\nfor (var i = 0, len = code.length; i < len; ++i) {\r\n    lookup[i] = code[i]\r\n    revLookup[code.charCodeAt(i)] = i\r\n}\r\n\r\n// Support decoding URL-safe base64 strings, as Node.js does.\r\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\r\nrevLookup['-'.charCodeAt(0)] = 62\r\nrevLookup['_'.charCodeAt(0)] = 63\r\n\r\nfunction getLens (b64) {\r\n    var len = b64.length\r\n\r\n    if (len % 4 > 0) {\r\n        throw new Error('Invalid string. Length must be a multiple of 4')\r\n    }\r\n\r\n    // Trim off extra bytes after placeholder bytes are found\r\n    // See: https://github.com/beatgammit/base64-js/issues/42\r\n    var validLen = b64.indexOf('=')\r\n    if (validLen === -1) validLen = len\r\n\r\n    var placeHoldersLen = validLen === len\r\n        ? 0\r\n        : 4 - (validLen % 4)\r\n\r\n    return [validLen, placeHoldersLen]\r\n}\r\n\r\n// base64 is 4/3 + up to two characters of the original data\r\nfunction byteLength (b64) {\r\n    var lens = getLens(b64)\r\n    var validLen = lens[0]\r\n    var placeHoldersLen = lens[1]\r\n    return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\r\n}\r\n\r\nfunction _byteLength (b64, validLen, placeHoldersLen) {\r\n    return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\r\n}\r\n\r\nfunction toByteArray (b64) {\r\n    var tmp\r\n    var lens = getLens(b64)\r\n    var validLen = lens[0]\r\n    var placeHoldersLen = lens[1]\r\n\r\n    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\r\n\r\n    var curByte = 0\r\n\r\n    // if there are placeholders, only get up to the last complete 4 chars\r\n    var len = placeHoldersLen > 0\r\n        ? validLen - 4\r\n        : validLen\r\n\r\n    for (var i = 0; i < len; i += 4) {\r\n        tmp =\r\n            (revLookup[b64.charCodeAt(i)] << 18) |\r\n            (revLookup[b64.charCodeAt(i + 1)] << 12) |\r\n            (revLookup[b64.charCodeAt(i + 2)] << 6) |\r\n            revLookup[b64.charCodeAt(i + 3)]\r\n        arr[curByte++] = (tmp >> 16) & 0xFF\r\n        arr[curByte++] = (tmp >> 8) & 0xFF\r\n        arr[curByte++] = tmp & 0xFF\r\n    }\r\n\r\n    if (placeHoldersLen === 2) {\r\n        tmp =\r\n            (revLookup[b64.charCodeAt(i)] << 2) |\r\n            (revLookup[b64.charCodeAt(i + 1)] >> 4)\r\n        arr[curByte++] = tmp & 0xFF\r\n    }\r\n\r\n    if (placeHoldersLen === 1) {\r\n        tmp =\r\n            (revLookup[b64.charCodeAt(i)] << 10) |\r\n            (revLookup[b64.charCodeAt(i + 1)] << 4) |\r\n            (revLookup[b64.charCodeAt(i + 2)] >> 2)\r\n        arr[curByte++] = (tmp >> 8) & 0xFF\r\n        arr[curByte++] = tmp & 0xFF\r\n    }\r\n\r\n    return arr\r\n}\r\n\r\nfunction tripletToBase64 (num) {\r\n    return lookup[num >> 18 & 0x3F] +\r\n        lookup[num >> 12 & 0x3F] +\r\n        lookup[num >> 6 & 0x3F] +\r\n        lookup[num & 0x3F]\r\n}\r\n\r\nfunction encodeChunk (uint8, start, end) {\r\n    var tmp\r\n    var output = []\r\n    for (var i = start; i < end; i += 3) {\r\n        tmp =\r\n            ((uint8[i] << 16) & 0xFF0000) +\r\n            ((uint8[i + 1] << 8) & 0xFF00) +\r\n            (uint8[i + 2] & 0xFF)\r\n        output.push(tripletToBase64(tmp))\r\n    }\r\n    return output.join('')\r\n}\r\n\r\nfunction fromByteArray (uint8) {\r\n    var tmp\r\n    var len = uint8.length\r\n    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\r\n    var parts = []\r\n    var maxChunkLength = 16383 // must be multiple of 3\r\n\r\n    // go through the array every three bytes, we'll deal with trailing stuff later\r\n    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\r\n        parts.push(encodeChunk(\r\n            uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\r\n        ))\r\n    }\r\n\r\n    // pad the end with zeros, but make sure to not forget the extra bytes\r\n    if (extraBytes === 1) {\r\n        tmp = uint8[len - 1]\r\n        parts.push(\r\n            lookup[tmp >> 2] +\r\n            lookup[(tmp << 4) & 0x3F] +\r\n            '=='\r\n        )\r\n    } else if (extraBytes === 2) {\r\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1]\r\n        parts.push(\r\n            lookup[tmp >> 10] +\r\n            lookup[(tmp >> 4) & 0x3F] +\r\n            lookup[(tmp << 2) & 0x3F] +\r\n            '='\r\n        )\r\n    }\r\n\r\n    return parts.join('')\r\n}\r\n"]}